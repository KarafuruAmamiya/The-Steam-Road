NGame = { 
}

NJominiMap = {
}

NAI = {
	STRATEGY_RANDOM_FACTOR = 10.0
	CHANGE_STRATEGY_INCREASE_WEEKLY_CHANCE = 40.0
	CHANGE_STRATEGY_DIPLOMATIC_STATE_GAINED = 15
	CHANGE_STRATEGY_DIPLOMATIC_STATE_LOST = 15
	COUNTRY_GOAL_STRATEGIC_UPDATE_COUNT = 10
	COUNTRY_GOAL_ADJUSTMENT_UPDATE_COUNT = 75
	BASE_AGGRESSION = 0.6
	DIPLO_PROPOSAL_TO_PLAYER_COOLDOWN_MONTHS = 60
	DIPLO_PROPOSAL_LIKELY_NON_ACCEPTED_COOLDOWN_MONTHS = 60
	GOAL_BEFRIEND_RECONCILE_FACTOR = 100
	RECRUITABLE_COMMANDER_RANDOM_FACTOR = 1.5
	START_DIPLO_PLAY_RANDOM_FACTOR = 1.2
	WAR_GOAL_RANDOM_FACTOR = 1.5
	TECH_RANDOM_FACTOR = 1.5
	TECH_REMAINING_COST_FACTOR = 0.03
	DEFEND_STATE_CAPITAL_WEIGHT = 50
	INVADE_STATE_CAPITAL_WEIGHT = 50
	NAVAL_INVASION_COOLDOWN_DAYS = 60
	FRONT_OR_HQ_IMPORTANCE_MIN_SCORE = 20
	COLONY_ARABLE_LAND_WEIGHT = 15
	COLONY_ADJACENT_WEIGHT_MULT = 20
	COLONY_RANDOM_FACTOR = 1.5
	MONEY_SPENDING_RANDOM_FACTOR = 1.5
	PRODUCTION_BUILDING_RANDOM_FACTOR = 5
	VIOLATE_SOVEREIGNTY_RANDOM_FACTOR = 1.5
	
	MONEY_SPENDING_SUPPLY_NETWORK_DESIRED_THRESHOLD = 1.1 # If supply network is worse than this, AI wants to improve it

	MONEY_SPENDING_CONSTRUCTION_CRITICAL_THRESHOLD = 0.88 # If actual-to-wanted number of construction sector buildings is below this, AI considers it very important to get more
	
	MONEY_SPENDING_WANTED_CONVOYS_PER_BARRACKS_LEVEL = 4 # If the AI has fewer free convoys than this per level of barracks, it wants more ports
	MONEY_SPENDING_BUREAUCRACY_CRITICAL_THRESHOLD = 0.95 # If bureaucracy income to expenses is worse than this, AI considers it critical to improve it
	MONEY_SPENDING_BUREAUCRACY_DESIRED_THRESHOLD = 1.08 # If bureaucracy income to expenses is worse than this, AI wants to improve it
	MONEY_SPENDING_BUREAUCRACY_EXCESSIVE_THRESHOLD = 1.16 # If bureaucracy income to expenses is better than this, AI will not improve it
	MONEY_SPENDING_INFRASTRUCTURE_CRITICAL_THRESHOLD = 0.85 # If infra production to usage is worse than this, AI considers it critical to improve it
	MONEY_SPENDING_INFRASTRUCTURE_DESIRED_THRESHOLD = 1.15 # If infra production to usage is worse than this, AI wants to improve it
	
	PRODUCTION_METHOD_PROFIT_FACTOR = 1.75 #1.0 Per pound of profit the produced goods would generate
	PRODUCTION_METHOD_DEFICIT_FACTOR = 1.4 #1.5 Per pound of deficit the produced goods would generate (multiplies a negative value)
	PRODUCTION_METHOD_CHANCE_TO_CHANGE = 0.2 # Chance that the AI will consider changing a production method when evaluating methods
	
	PRODUCTION_METHOD_INCREASE_OUTPUT_PENALTY_FACTOR = 0.2 #0.01 # Multiply method score by this if we're increasing the building's output penalties
	
	PRODUCTION_BUILDING_INCREASE_SHORTAGE_MULT = 0.2 #0.01 Multiply score by this if we're increasing the state region's shortages
	
	AI_PEACE_AGREEMENT_WHITE_PEACE_BASE = 15 # If no wargoals are being enforced on either side
	AI_PEACE_AGREEMENT_WHITE_PEACE_WAR_DURATION = 2 # For each month the war goes on add this to the acceptance for a white peace
	
	TRADE_ROUTE_MIN_MARKET_SHARE = 0.05 # If the AI is junior in a customs union and has less than this market share in a market, don't make any trade routes
	TRADE_ROUTE_MIN_SCORE_TO_CREATE_BASE = 750 #1000 If a potential trade route is scored less than this, don't create it
	TRADE_ROUTE_ACCEPTABLE_SPENDING = 0.004 #0.002 AI will not spend more BUR than this on trade routes (scaled by weekly GDP)
	
	TRADE_ROUTE_REPLACE_THRESHOLD = 3.5 #5.0 If there is a sufficiently better new trade route (old route score x this), remove the old one
	TRADE_ROUTE_SUPPLY_NETWORK_STRENGTH_THRESHOLD = 0.9 #1.0 If supply network strength less than this, don't make new trade routes
	TRADE_ROUTE_DURATION_FACTOR = 5.0 #10.0 # AI multiplies value of a route by ( 1 + this ) at COMPETITIVENESS_DURATION_BONUS_MAX_MONTHS (scales linearly up to this value at a lower duration)
	
	# Below data is used for naval invasions:
	NAVAL_INVASION_RANDOM_FACTOR = 0.4 								# The higher this is, the more random AI naval invasion theater selection will be
	NAVAL_INVASION_COOLDOWN_DAYS = 20 								# After launching a naval invasion, the AI will wait at least this long before launching another
	NAVAL_INVASION_MIN_SCORE = 10									# AI won't bother launching naval invasions against theaters with a lower total state score than this
	NAVAL_INVASION_MAX_LOCAL_FRONT_SCORE = 200						# Don't launch a naval invasion if there is a local front of at least this total score for the general
	
	MAX_INSTITUTION_SPENDING = 0.025 #0.02 AI will not spend more BUR than this on institutions (scaled by weekly GDP)
	INSTITUTION_SPENDING_INCREASE_SPENDING_RATIO = 1.0 # If current + additional institution spending is equal or less than max spending * this, try to improve some institutions
	INSTITUTION_SPENDING_DECREASE_SPENDING_RATIO = 2.1 # 2.0 If current institution spending is at least max spending * this, try to degrade some institutions 
	
	UNIFICATION_AGGRESSION_MULT_HIGHER_TIER = 1 # AI aggression is multiplied by this for calculating whether they should try to start a unification/leadership play, if the country would end up forming a nation of a higher tier
	DIPLO_PLAY_SWAY_THRESHOLD = 1.5 # If AI has this much military strength compared to enemy, don't bother trying to sway anyone
	DIPLO_PLAY_NEUTRALITY_IN_SUBJECT_CONFLICT = -70 #-50 # If either side in the play is a subject, subtract this amount of neutrality score
	MONEY_SPENDING_INNOVATION_CRITICAL_THRESHOLD = 0.5 #0.25 # If innovation production compared to cap is worse than this, AI considers it very important to improve
	AI_PEACE_AGREEMENT_BASE_VALUE = -40 #-10
	FRONT_OR_HQ_IMPORTANCE_MIN_SCORE  = 20 #50		
	HQ_STATIONING_IMPORTANCE_NOT_OWN_HQ_WEIGHT_MULT = 2.0 #1.2
	CHANGE_LAW_POLITICAL_MOVEMENT_RADICALISM_FACTOR = 8 #6 # Scales with movement radicalism for movement that wants to enact the law
}

NCountry = {
	COUNTRY_FORMATION_CANDIDATE_MIN_RANK = 2
}

NPolitics = {
	LEADER_IDEOLOGY_RANDOM_FACTOR = 1.5
	POP_IG_RANDOM_FACTOR = 0.3
	MAX_POP_FRACTION_LEAVE_IG = 0.1
	
	SECESSION_WEEKLY_CHANCE_EXCESS_DIV = 10			# Excess turmoil is divided by this and used to increase chance for secession movements
	MIN_POP_SIZE_TO_SECEDE = 50000						# Num pops (including dependents) needed for a secession movement to start
	SECESSION_STATE_CUTOFF_PERCENT = 0.33				# Required pop percentage in State to be egligble (oi) for secession
	SECESSION_COOLDOWN_YEARS = 5
	
	POLITICAL_MOVEMENT_LOYALISTS_AT_SUCCESS = 0.3 #0.25 	# This fraction of pops backing a political movement become more loyalist if movement succeeds
	POLITICAL_MOVEMENT_MONTHLY_RADICALS = 0.001 #0.002 				# This fraction of pops backing a non-placated political movement to enact or restore become more radical each month
	MIN_IG_APPROVAL_FROM_LAWS = -10 #-5		# IG cannot have approval lower than this as a total from laws 'on the book'
	MAX_IG_APPROVAL_FROM_LAWS = 10 #5		# IG cannot have approval higher than this as a total from laws 'on the book'
	IG_APPROVAL_FROM_RADICAL_LAW_CHANGE = 7 #10 		# IG approval/disapproval for changing to another law, if the change is a major one
	IG_APPROVAL_FROM_EXTREME_LAW_CHANGE = 15 #20 		# IG approval/disapproval for changing to another law, if the change is extreme
	IG_APPROVAL_FROM_LOYALISTS = 5 #15		# If 100% of the political strength of the IG is loyalist, change approval by this amount
	IG_APPROVAL_FROM_RADICALS = -5 #-15		# If 100% of the political strength of the IG is radical, change approval by this amount
	IG_APPROVAL_FROM_LAW = 1 		# IG approval/disapproval for laws that are for/against their ideologies
	IG_APPROVAL_FROM_LAW_STRONG_STANCE = 3 #2 		# IG approval/disapproval for laws that are strongly for/against their ideologies
}

NEconomy = {
} 

NMilitary = {
	MANPOWER_LOST_DUE_TO_ATTRITION_PER_WEEK_MIN = 0.0005
	MAPOWER_LOST_DUE_TO_ATTRITION_PER_WEEK_MAX = 0.005
	USE_TRAVEL_NETWORK = no						# (Temp) toggle for using direct travel vs travel network
}

NDiplomacy = {
	WAR_GOAL_INFAMY_CONQUER_STATE = 6.0
	WAR_GOAL_INFAMY_RETURN_STATE = 1.5
	WAR_GOAL_INFAMY_TAKE_TREATY_PORT = 2.0
	WAR_GOAL_INFAMY_TRANSFER_SUBJECT = 2.5	
	WAR_GOAL_INFAMY_ANNEX_COUNTRY = 6.0
	WAR_GOAL_INFAMY_UNIFICATION = 0.5
	WAR_GOAL_INFAMY_REGIME_CHANGE = 1.0
	SWAY_OFFER_WARGOAL_MANEUVERS_COST_RETURN_STATE = 5
	
	WAR_GOAL_CONTAIN_THREAT_YEARS_SINCE_CONQUEST = 25
	
	BASE_YEARLY_INFAMY_DECAY_RATE = 3.5 	# Decay rate of infamy per year
	
	WAR_GOAL_INFAMY_POPULATION_SCALING_MULTIPLIER = 0.02 # For each WAR_GOAL_INFAMY_POPULATION_SCALING_FACTOR population in a country/state, multiply infamy by this
	WAR_GOAL_INFAMY_POPULATION_SCALING_MULTIPLIER_MAX_PER_STATE = 10 # Infamy population multiplier can't be higher than this for each state affected
	WAR_GOAL_INFAMY_POPULATION_SCALING_MULTIPLIER_MAX_TOTAL = 40 # Infamy population multiplier can't be higher than this, regardless of number of states affected
	WAR_GOAL_INFAMY_HOMELAND_FACTOR = -0.5 # Infamy is adjusted by this if the states taken/puppeted etc are Homelands of the aggressor
	WAR_GOAL_INFAMY_UNINCORPORATED_FACTOR = -0.75 # Infamy is adjusted by this if the states taken/puppeted etc are unincorporated
	WAR_GOAL_INFAMY_OWN_SUBJECT_MULT = 0.67 # Infamy is multiplied by this for wargoals targeting your own subject
}

NPops = {
	RADICALS_MONTHLY_FROM_DISCRIMINATION = 0.006 #0.005 # Scales by literacy
	
	RADICALS_MAX_FROM_LOW_SOL = 0.149 #0.15				# If pop is already this % radical, don't add more radicals from low SOL (Scales by delta between SoL and expected min SoL)
	RADICALS_MAX_FROM_DISCRIMINATION = 0.5		# If pop is already this % radical, don't add more radicals from discrimination (Scales by literacy)
	ASSIMILATION_RATE = 0.006 #0.002					# Percentage of pops who will Assimilate into a different Culture each month, if eligible
	CONVERSION_RATE = 0.001						# Percentage of pops who will Convert into a different Religion each month, if eligible
	MIGRATION_PULL_EMPTY_STATE = 100						# If a state has no pops at all, give it a huge migration pull
	MIGRATION_PULL_FROM_LIVING_STANDARD = 1					# Migration pull from each point of average living standard in target state	
	MIGRATION_PULL_FROM_AVAILABLE_EMPLOYMENT = 0.5			# Migration pull is increased by for each 10k available non subsistence jobs
	MIGRATION_PULL_FROM_AVAILABLE_EMPLOYMENT_MAX = 10		# Migration pull from available non subsistence jobs cannot exceed this
	MIGRATION_PULL_FROM_AVAILABLE_ARABLE_LAND_MAX_EMPLOYMENT_MULTIPLIER = 0.75		# Count available arable land as though the subsistence farm has only this fraction of its max employment, so that massive states in China with mostly full subsistence farms don't get a huge migration boost
	MIGRATION_PULL_FROM_AVAILABLE_ARABLE_LAND = 0.5			# Migration pull is increased by for each 10k available subsistence jobs
	MIGRATION_PULL_FROM_AVAILABLE_ARABLE_LAND_MAX = 25		# Migration pull from available subsistence jobs cannot exceed this
	MIGRATION_PULL_REDUCTION_FROM_UNEMPLOYMENT = 1			# Migration pull is reduced by this for each 10k unemployed pops
	MIGRATION_PULL_REDUCTION_FROM_UNEMPLOYMENT_MAX = 50		# Migration pull reduction from unemployment cannot exceed this

	# The below factors are applied *after* migration pull threshold checks, so they only impact how large a share of migration a state gets
	MIGRATION_PULL_MULT_FROM_CULTURE_TARGET = 60.0 #30.0			# Migration pull multiplied by this from target state being a cultural migration target
	MIGRATION_PULL_MULT_FROM_CULTURE_TARGET_ADJACENCY = 10.0 #5.0	# Migration pull multiplied by this from target state being next to a cultural migration target
	MIGRATION_PULL_MULT_FROM_NO_DISCRIMINATION = 1.0		# Migration pull multiplier increased by this if pop is moving from discrimination to no discrimination (not applied to mass migration targets)
	MIGRATION_PULL_MULT_FROM_HOMELANDS = 0.5				# Migration pull multiplier increased by this if pop is moving to cultural homelands (not applied to mass migration targets)
	
	# General factors for how many pops will migrate
	MIGRATION_PULL_HIGH_THRESHOLD = 1.25						#	State must have a migration pull of at least market average * this to get economic immigration
	MIGRATION_PULL_LOW_THRESHOLD = 0.75							# State must have a migration pull of less or equal than market average * this to get full amount of emigration
	ECONOMIC_MIGRATION_BASE = 0.02								# Base amount of a pop that wants to move for economic reasons
	ECONOMIC_MIGRATION_FROM_SOL_DIFFERENCE = 0.01				# Each point of difference of pop SoL to the market's average SoL makes this fraction of the pop want to economically migrate (in %)
	ECONOMIC_MIGRATION_STATE_POPULATION_THRESHOLD = 100000				# States with less pops than this have reduced economic emigration numbers to avoid total depopulation
	CULTURAL_MIGRATION_BASE = 0.10 #0.08 #0.05								# Base amount of a pop that wants to move due to mass migration
	CULTURAL_MIGRATION_FROM_RADICALS = 0.25 #0.05						# At 100% radicals, this fraction of the pop wants to mass migrate
	MIGRATION_UNEMPLOYMENT_MULT = 20.0							# Amount of migration from SoL is increased by this when a pop is unemployed
	MIGRATION_MIN_STATE_POPS = 20000							# A state with less pops than this will not get emigration
	MIGRATION_MIN_POP_AMOUNT = 1								# No less than this amount of a pop can migrate each week (if any migration at all should happen)
	MIGRATION_MAX_POP_AMOUNT = 10000							# No more than this amount of a pop can migrate each week
	MIGRATION_MAX_PER_STATE_BASE = 250 #500							# No more than this amount of people can move from or to a state in a single week (base)	
	MIGRATION_MAX_PER_STATE_INFRASTRUCTURE = 1.5 #2					# No more than this amount of people can move from or to a state in a single week (scales with infrastructure)
	MIGRATION_MAX_EMIGRATION_AS_POPULATION_FRACTION = 0.00001 #0.0005	# Max emigration per week is clamped to this fraction of a state's population
	MIGRATION_MAX_PER_STATE_UNEMPLOYMENT_ORIGIN_FRACTION = 0.005	# The amount of unemployed workers in a state * this value is added to how many people can move from it (after clamping from MIGRATION_MAX_EMIGRATION_AS_POPULATION_FRACTION)
	MIGRATION_MAX_PER_STATE_UNEMPLOYMENT_TARGET_FRACTION = 0.005	# The amount of unemployed workers in a state * this value is removed from how many people can move to it (after clamping from MIGRATION_MAX_EMIGRATION_AS_POPULATION_FRACTION)
	MIGRATION_MAX_PER_STATE_CULTURAL_EMIGRATION_MULT = 120.0 #5.0 #3.0		# Weekly emigration caps are multiplied by this amount by this for cultural-type migration (after clamping from MIGRATION_MAX_EMIGRATION_AS_POPULATION_FRACTION)
	MIGRATION_MAX_PER_STATE_CULTURAL_IMMIGRATION_MULT = 150.0 #12.0 #8.0		# Weekly immigration caps are multiplied by this amount by this for cultural-type migration (after clamping from MIGRATION_MAX_EMIGRATION_AS_POPULATION_FRACTION)
	MIGRATION_AVERAGE_ATTRACTION_EMIGRATION_MULT = 0.25			# States with an average migration attraction gets this multiplier to emigrants
	
	# Factors for creating mass migration targets
	MASS_MIGRATION_ORIGIN_MIN_TURMOIL = 0.15 #0.25			# Must have at least this much turmoil in cultural homelands to create a migration target
	MASS_MIGRATION_ORIGIN_MIN_EMIGRANTS = 100000		# A country must have at least this many possible migrants to trigger a mass migration
	MASS_MIGRATION_TARGET_MAX_TURMOIL = 0.149			# Must have this or less turmoil among the culture for a country to be picked as a mass migration target
	MASS_MIGRATION_TARGET_MIN_ARABLE_LAND = 50			# A state must have at least this much arable land to be a mass migration target
	MASS_MIGRATION_STATE_MIN_MARKET_ACCESS = 0.5		# A state must have at least this much market access to their market to be a mass migration target or origin state
	MASS_MIGRATION_SPAWN_CHANCE = 0.6 #0.5 					# Per week for each potential mass migration, scales with turmoil (1 = 1%)
	MASS_MIGRATION_SPAWN_CHANCE_STRUGGLING_FACTOR = 0.1 # Chance increases by this for each point of SoL below 10 for a culture in a country
	MASS_MIGRATION_SPAWN_CHANCE_STARVING_FACTOR = 0.5 	# Chance increases by this for each point of SoL below 5 for a culture in a country (added on top of struggling factor)
	MASS_MIGRATION_TARGET_COUNTRY_RANDOM_FACTOR = 0.5	# The higher this is, the more random the selection of mass migration country targets will be
	MASS_MIGRATION_TARGET_STATE_RANDOM_FACTOR = 0.5		# The higher this is, the more random the selection of mass migration state targets in the target country will be
	MASS_MIGRATION_DURATION_MONTHS = 12					# How long does a mass migration last in months
	MASS_MIGRATION_COOLDOWN_MONTHS = 30					# How many months before the same culture can mass migrate from a country again
	MASS_MIGRATION_NUM_TARGET_STATES_FOR_NO_PENALTY = 5	# Countries with at least this number of possible target states do not receive any penalty to their mass migration target score
	MASS_MIGRATION_FEW_TARGET_STATES_PENALTY = 0.25		# Mass migration target score is divided by ( 1 + this * number of possible target states less than MASS_MIGRATION_NUM_TARGET_STATES_FOR_NO_PENALTY )

	COLONIZATION_RIGHTS_GROWTH_MULTIPLIER = 2.0			# Colonial growth AND max colonial growth are multiplied by this if you have colonization rights
	COLONIAL_GROWTH_BASE_FACTOR = 0.00001				# Colonial growth generated by a state is ( total pops / 1000 ) * this * modifier from institution
	MIN_BASE_COLONIAL_GROWTH = 0.01						# Country base colonial growth from population cannot be lower than this
	MAX_BASE_COLONIAL_GROWTH = 0.05 #0.1						# Country base colonial growth from population cannot be higher than this
	MAX_COLONIAL_GROWTH = 0.02							# Colonies can grow by this much at most per day 

	#LITERACY_DIEOFF_BIAS = 1.5 #0.7					# Percentage of literate pops who die of old age compared to the current literacy rate, the higher this value the faster the population becomes illiterate when literacy suffers
}

NEvents = {
}

NTechnology = {
}

NCharacters = {
	RULER_MIN_AGE_FOR_HEIR = 20 				# Before this age, don't randomly generate heirs for rulers
	RULER_AGE_FOR_HEIR_CHANCE_BOOST = 30 		# A year after this age start boosting chance of heir generation
	RULER_HEIR_GENERATION_CHANCE = 0.000125 	# Per day
	RULER_HEIR_CHANCE_BOOST_SCALE = -0.00000833	# Added to RULER_HEIR_CHANCE_BOOST for each year after RULER_AGE_FOR_HEIR_CHANCE_BOOST
}

NCommands = {
}

NBattle = {
	CASUALTY_MAJORITY_CULTURE_WEIGHT = 1
	SURVIVAL_RATE = 0.8
	CASUALTY_ROLL_MIN = 10
	CASUALTY_ROLL_MAX = 100
	MIN_DEPENDENTS_PER_ROLL = 25
}

NWar = {
}

NText = {
}

NDebug = {
}

