# Root = Country
on_monthly_pulse_country = {
	events = {
		character_roles_hidden.1
		character_roles_hidden.2
		character_roles_hidden.3
		character_roles_hidden.4
		character_roles_hidden.5
		character_roles_hidden.6
		communism.8 # Red Army
		peoples_springtime.1
		dei_breakup.1
		unable_to_enact.1
		italy_flavor.1
		# Exile Agitators Events
		yeet_agitator_events.1
		yeet_agitator_events.2
		yeet_agitator_events.3
	}
	# Election Events
	random_events = {
		50 = 0
		1 = election_liberal_events.1
		1 = election_liberal_events.2
		1 = election_liberal_events.3
		1 = election_liberal_events.4
		1 = election_conservative_events.1
		1 = election_conservative_events.2
		1 = election_conservative_events.3
		1 = election_conservative_events.4
		1 = election_moderate_events.1
		1 = election_moderate_events.2
		1 = election_contextual_events.1
		1 = election_contextual_events.2
		1 = election_contextual_events.3
		1 = election_contextual_events.4
		1 = election_contextual_events.5
		1 = election_contextual_events.6
		1 = election_contextual_events.7
		1 = election_contextual_events.8
		1 = election_neutral.1
		1 = election_neutral.2
		1 = election_neutral.3
		1 = election_neutral.4
		1 = election_neutral.5
		1 = election_neutral.6
		1 = election_neutral.7
		1 = election_neutral.8
		1 = election_other_parties_events.1
		1 = election_other_parties_events.2
		1 = election_other_parties_events.3
		1 = election_other_parties_events.4
		1 = election_other_parties_events.5
		1 = ig_leaders.3
		1 = communist_elections.1
		1 = communist_elections.2
		1 = communist_elections.3
		1 = communist_elections.4
		1 = agitators_election_events.1
		1 = agitators_election_events.2
		1 = agitators_election_events.3
		1 = agitators_election_events.4
		1 = agitators_election_events.5
		1 = agitators_election_events.6
		1 = agitators_election_events.7
		1 = agitators_election_events.8
		1 = agitators_election_events.9
		1 = agitators_election_events.10
		1 = agitators_election_events.11
		1 = agitators_election_events.12
		1 = agitators_election_events.13
		1 = agitators_election_events.14
		1 = agitators_election_events.15
		1 = agitators_election_events.16
		1 = agitators_election_events.17
		1 = agitators_election_events.18
		1 = agitators_election_events.19
		1 = agitators_election_events.20
		1 = agitators_election_events.21
		1 = agitators_election_events.22
		1 = agitators_election_events.23
		1 = agitators_election_events.24
		1 = agitators_election_events.25
		1 = agitators_election_events.26
		1 = agitators_election_events.27
		1 = agitators_election_events.28
		1 = agitators_election_events.29
		1 = agitators_election_events.30
		1 = agitators_election_events.31
		1 = agitators_election_events.32
		1 = agitators_election_events.33
		1 = agitators_election_events.34
		1 = agitators_election_events.35
		1 = agitators_election_events.36
		1 = agitators_election_events.37
		1 = agitators_election_events.38
		1 = agitators_election_events.39
		1 = agitators_election_events.40
		1 = agitators_election_events.41
		1 = agitators_election_events.42
		1 = agitators_election_events.43
		1 = agitators_election_events.44
		1 = agitators_election_events.45
		1 = agitators_election_events.46
		1 = agitators_election_events.47
		1 = agitators_election_events.48
		1 = agitators_election_events.49
		1 = agitators_election_events.50
	}
	#Coup
	random_events = {
		5 = 0
		1 = coup.1
	}
	effect = {
		every_character_in_exile_pool = {
			limit = {
				popularity <= 15
			}
			kill_character = yes
		}
		if = {
			limit = {
				year < 1930
				NOT = { has_global_variable = germany_formed }
				c:GER ?= { is_country_alive = yes }
			}
			set_global_variable = germany_formed
		}
	}
}

on_weekly_pulse = {
	events = {
	}
}

# Root = Colony state
on_colony_created = {
	effect = {
		owner = {
			save_scope_as = colony_founder
		}
		owner = {
			if = {
				limit = {
					has_journal_entry = je_tutorial_colonize_state
				}
				root = {
					set_variable = {
						name = tut_colony_target
					}
				}
			}
		}
	}
}

# Root = country
on_native_uprising = {
	effect = {
		post_notification = native_uprising_notification
		
		every_country = {
			limit = {
				is_country_type = decentralized
				is_diplomatic_play_enemy_of = root
				NOT = { has_war_with = root }
			}
			save_scope_as = native_nation
		}
		every_diplomatic_play = {
			limit = {
				any_scope_play_involved = {
					this = scope:native_nation
				}
			}
			end_play = yes
		}
		create_diplomatic_play = {
			target_country = scope:native_nation
			war = yes
			type = dp_native_uprising
		}
	}
}

# Root = Country
on_capitulation = {
	effect = {
		set_variable = {
            name = recently_lost_war
            days = 1825
            value = yes
        }
		if = {
			limit = {
				is_country_type = decentralized
			}
			every_country = {
				limit = {
					has_truce_with = root
				}
				set_tension = { 
					country = root 
					value = 0 
				}
				end_truce = {
					country = root
				}
			}
		}		
	}
}

# Root = Character
on_character_creation = {
}

# Root = Character
on_character_death = {
	effect = {

		#Vice President, if exists, replaces dead President in Presidential Republics
		if = {
			limit = {
				is_ruler = yes
				owner = {
					has_law = law_type:law_presidential_republic
					has_variable = vice_president
					any_scope_character = {
						has_variable = vice_president_trigger
					}
				}
			}
			owner = {
				trigger_event = character_deaths.1
			}
		}
	}
}

on_election_started = {
	trigger = { in_election_campaign = yes }
	effect = { 
		set_variable = election_onging
	}
}

on_election_ended = {
	trigger = {
		in_election_campaign = no
		has_variable = election_onging
	}
	effect = {
		remove_variable = election_onging
		
		#Septennial Act 1715, 7 year maximum unless Parliament dissolved or Monarch dies
		if = {
			limit = {
				exists = c:ENG
				this = c:ENG
				c:ENG = {
					has_law = law_type:law_monarchy
					country_has_voting_franchise = yes
				}
			}
			call_election = {
				months = 84
			}
		}
	}
}


# Root = owner Country of the Law
# executed when enactment of any law begins
on_law_enactment_started = {
	effect = {
		if = {
			limit = {
				has_law = law_type:law_monarchy
				OR = {
					is_enacting_law = law_type:law_presidential_republic
					is_enacting_law = law_type:law_parliamentary_republic
					is_enacting_law = law_type:law_council_republic
				}
			}
			set_variable = {
				name = abolishing_monarchy_var
				value = 0
			}
			add_journal_entry = { type =  je_abolish_monarchy }
		}
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is success
# (currently, this means the law will get enacted so it will be followed by
# on_law_enactment_ended and on_law_enacted).
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is about to end
on_law_checkpoint_success = {
	effect = {
		add_enactment_phase = 1
		if = {
			limit = {
				enacting_any_law = yes
			}
			trigger_event = { id = law_notification.4 days = 0 }
		}
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is advance
on_law_checkpoint_advance = {
	random_events = {
		10 = laws.1
		10 = children_rights_events.1 
		10 = free_speech_laws.1
		10 = free_speech_laws.2
		10 = labor_rights.1
		10 = labor_rights.4
		10 = children_rights_events.4
		10 = welfare_laws.1
		10 = welfare_laws.4
		10 = welfare_laws.8
		10 = migration_laws.1
		10 = migration_laws.4
		10 = bureaucracy.2
		10 = colonization.1
		10 = colonization.3
		10 = rights_of_women_laws.1
		10 = rights_of_women_laws.2
		10 = internal_security_events.2
		10 = slavery_law_events.1
		10 = slavery_law_events.4
		10 = laws_police.1
		10 = anarchy.3
		10 = tax.2
		10 = tax.5
		10 = theocracy.1
		10 = citizenship_laws.1
		10 = citizenship_laws.4
		100 = 1848.1
		100 = 1848.3
		10 = education_laws.1
		10 = education_laws.4
		10 = distribution_of_power_laws.1
		10 = council_republic_law_events.1
		10 = distribution_of_power_laws.4
		10 = monarchy_law_events.1
		10 = monarchy_law_events.2
		10 = economy_laws.1
		10 = economy_laws.4
		10 = conscription_laws.1
		10 = republic_laws.1
		10 = internal_security_events.4
		10 = healthcare_laws.1
		10 = healthcare_laws.4
		10 = anti_state_religion.1
		10 = distribution_of_power_laws.7
		10 = distribution_of_power_laws.10
		10 = rights_of_women_laws.5
		10 = agitators_law_events.3
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.17
		10 = agitators_law_events.21
		10 = agitators_law_events.22
		10 = agitators_law_events.23
		10 = agitators_law_events.24
		10 = agitators_law_events.25
		10 = agitators_law_events.26
		10 = agitators_law_events.27
		10 = agitators_law_events.28
		10 = agitators_law_events.29
		10 = agitators_law_events.30
		10 = state_atheism.2
		10 = state_atheism.6
		2 = generic_laws.1
		2 = generic_laws.4
		2 = generic_laws.7
		2 = generic_laws.10
		2 = ig_petitions.4 #Devout want State Religion
		2 = ig_petitions.7 #Intelligentsia want free speech
		2 = ig_petitions.19 #Armed forces want conscription
		2 = ig_petitions.22 #Petite-Bourgeoisie want Restricted Citizenship
		1 = law_notification.1
		10 = single_party_state.1
		5 = single_party_state.6
		5 = single_party_state.7
		10 = land_ownership_law_events.2
		10 = land_ownership_law_events.5
		10 = land_ownership_law_events.8
		10 = luddite_law_events.1
		10 = luddite_law_events.4
		10 = agitator_legal_events.21
		10 = agitator_legal_events.22
		10 = agitator_legal_events.23
		10 = agitator_legal_events.24
		10 = agitator_legal_events.25
		10 = agitator_legal_events.26
		10 = agitator_legal_events.27
		10 = agitator_legal_events.28
		10 = agitator_legal_events.29
		10 = agitator_legal_events.30
		10 = land_ownership_law_events.13
		10 = land_ownership_law_events.16
		10 = technocracy.2
		100 = nihilism.13
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is debate
on_law_checkpoint_debate = {
	random_events = {
		10 = children_rights_events.2
		10 = free_speech_laws.5
		10 = labor_rights.2
		10 = labor_rights.5
		10 = children_rights_events.6
		10 = welfare_laws.2
		10 = welfare_laws.5
		10 = welfare_laws.9
		10 = migration_laws.2
		10 = migration_laws.5
		10 = bureaucracy.3
		10 = colonization.1
		10 = free_speech_laws.5
		10 = free_speech_laws.6
		10 = internal_security_events.3
		10 = slavery_law_events.2
		10 = slavery_law_events.5
		10 = laws_police.2
		10 = anarchy.2
		10 = tax.3
		10 = tax.6
		10 = theocracy.2
		10 = citizenship_laws.2
		10 = citizenship_laws.5
		10 = education_laws.2
		10 = education_laws.5
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.2
		10 = council_republic_law_events.2
		10 = distribution_of_power_laws.5
		10 = monarchy_law_events.3
		10 = economy_laws.2
		10 = economy_laws.5
		10 = isolation.2
		10 = conscription_laws.2
		10 = republic_laws.2
		10 = internal_security_events.5
		10 = healthcare_laws.2
		10 = healthcare_laws.5
		10 = anti_state_religion.2
		10 = colonization.4
		10 = distribution_of_power_laws.8
		10 = distribution_of_power_laws.11
		10 = rights_of_women_laws.4
		10 = rights_of_women_laws.7
		10 = law_events.1
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.5
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = agitators_law_events.13
		10 = agitators_law_events.18
		10 = agitators_law_events.20
		10 = state_atheism.1
		10 = state_atheism.5
		2 = generic_laws.3
		2 = generic_laws.6
		2 = generic_laws.9
		2 = generic_laws.12
		10 = ig_petitions.1 #Landowners want to reverse Suffrage
		10 = ig_petitions.10 #Rural folk want no conscription
		10 = ig_petitions.13 #Trade Unions want compulsory primary school
		20 = ig_petitions.16 #Industrialists want no graduated taxes
		1 = law_notification.2
		10 = single_party_state.2
		10 = land_ownership_law_events.1
		10 = land_ownership_law_events.4
		10 = land_ownership_law_events.7
		10 = luddite_law_events.2
		10 = luddite_law_events.5
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.13
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.16
		10 = agitators_law_events.17
		10 = agitators_law_events.18
		10 = agitators_law_events.19
		10 = agitators_law_events.20
		10 = land_ownership_law_events.12
		10 = land_ownership_law_events.15
		10 = agitator_legal_events.11
		10 = agitator_legal_events.12
		10 = agitator_legal_events.13
		10 = agitator_legal_events.14
		10 = agitator_legal_events.15
		10 = agitator_legal_events.16
		10 = agitator_legal_events.17
		10 = agitator_legal_events.18
		10 = agitator_legal_events.19
		10 = agitator_legal_events.20
		10 = technocracy.3
	}
	events = {
		tanzimat_events.1
		tanzimat_events.2
		tanzimat_events.4
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is stall
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even if the resulting event is particularly bad and
# will proceed to stop the enactment
on_law_checkpoint_stall = {
	random_events = {
		10 = children_rights_events.3
		10 = free_speech_laws.3
		10 = free_speech_laws.4
		10 = labor_rights.3
		10 = labor_rights.6
		10 = children_rights_events.5
		10 = welfare_laws.3
		10 = welfare_laws.6
		10 = welfare_laws.10
		10 = migration_laws.3
		10 = migration_laws.6
		10 = bureaucracy.1
		10 = colonization.1
		10 = colonization.2
		10 = rights_of_women_laws.3
		10 = internal_security_events.1
		10 = slavery_law_events.3
		10 = slavery_law_events.6
		10 = laws_police.3
		10 = anarchy.1
		10 = tax.1
		10 = tax.4
		10 = theocracy.3
		10 = citizenship_laws.3
		10 = citizenship_laws.6
		10 = education_laws.3
		10 = education_laws.6
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.3
		10 = council_republic_law_events.3
		10 = distribution_of_power_laws.6
		10 = monarchy_law_events.4
		10 = economy_laws.3
		10 = economy_laws.6
		10 = isolation.1
		10 = conscription_laws.3
		10 = republic_laws.3
		10 = internal_security_events.6
		10 = healthcare_laws.3
		10 = healthcare_laws.6
		10 = anti_state_religion.3
		10 = distribution_of_power_laws.9
		10 = distribution_of_power_laws.12
		10 = rights_of_women_laws.6
		10 = agitators_law_events.4
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.16
		10 = agitators_law_events.19
		10 = state_atheism.3
		10 = state_atheism.4
		10 = exiles_more_events.2
		2 = generic_laws.2
		2 = generic_laws.5
		2 = generic_laws.8
		2 = generic_laws.11
		1 = law_notification.3
		10 = single_party_state.3
		50 = single_party_state.4
		50 = single_party_state.5
		10 = land_ownership_law_events.3
		10 = land_ownership_law_events.6
		10 = land_ownership_law_events.9
		10 = luddite_law_events.3
		10 = luddite_law_events.6
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.3
		10 = agitators_law_events.4
		10 = agitators_law_events.5
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = land_ownership_law_events.10
		10 = land_ownership_law_events.11
		10 = land_ownership_law_events.14
		10 = land_ownership_law_events.17
		10 = land_ownership_law_events.18
		10 = agitator_legal_events.1
		10 = agitator_legal_events.2
		10 = agitator_legal_events.3
		10 = agitator_legal_events.4
		10 = agitator_legal_events.5
		10 = agitator_legal_events.6
		10 = agitator_legal_events.7
		10 = agitator_legal_events.8
		10 = agitator_legal_events.9
		10 = agitator_legal_events.10
		10 = technocracy.1
	}
	effect = {
	}
}

# Root = owner Country of the Law
# Executed when an enacting law is passed by reaching the final enactment phase
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_pass = {
	effect = {
		if = {
			limit = {
				is_player = yes
				NOT = { has_variable = achievement_vox_populi_var }
				any_political_movement = {
					desired_law = ROOT.currently_enacting_law.type
				}
				any_supporting_character = {
					has_role = agitator
				}
			}
			set_variable = achievement_vox_populi_var
		}
		if = {
			limit = {
				is_player = yes
				NOT = {
					has_variable = achievement_amish_paradise_var
				}
				is_enacting_law = law_type:law_industry_banned
				year < 1846
			}
			set_variable = achievement_amish_paradise_var
		}
	}
}

# Root = owner Country of the Law
# Executed when enactment fails by accumulating too many setbacks
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_fail = {
	effect = {
		post_notification = enactment_failed
	}
}


# Root = owner Country of the Law
# executed when enactment stops for any reason. Could be because the law has
# been enacted, or because the enactment has been stopped by the player.
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_ended = {
	effect = {
	}
}

# Root owner Country of the Law
# executed when the law is activated for any reason. It's usually because it
# has been enacted, but script can activate laws directly without going through
# the enactment process. Normally, it's immediately preceded by
# on_law_enactment_ended, but if a law is directly set by script, thus
# bypassing the enactment process, this will execute while
# on_law_enactment_ended will not
#
# NOTE: unlike the other on_law_<something> on-actions, at the point in time
# when this is triggered the law that was enacted is no longer considered being
# enacted. Therefore using the `currently_enacting_law` link will return the
# null law
on_law_activated = {
	events = {
	}
	effect = {
		#if = {
		#	limit = {
		#		has_law = law_type:law_frontier_colonialism
		#	}
		#	every_scope_state = {
		#		limit = {
		#			is_under_colonization = yes
		#			NOT = {
		#				has_modifier = frontier_colonialism_modifier
		#				any_neighbouring_state = {
		#					is_incorporated = yes
		#					owner = scope:colony_founder
		#				}
		#			}
		#		}
		#		add_modifier = frontier_colonialism_modifier
		#	}
		#}
		#if = {
		#	limit = {
		#		NOT = { has_law = law_type:law_frontier_colonialism }
		#	}
		#	every_scope_state = {
		#		limit = {
		#			is_under_colonization = yes
		#			has_modifier = frontier_colonialism_modifier
		#		}
		#		remove_modifier = frontier_colonialism_modifier
		#	}
		#}
		#if = {
		#	limit = {
		#		AND = {
		#			has_law = law_type:law_monarchy
		#			country_has_voting_franchise = yes
		#		}
		#	}
		#	create_character = {
		#		on_created = {
		#			set_variable = prime_minister_trigger
		#			owner = {
		#				set_variable = {
		#					name = prime_minister
		#					value = PREV
		#				}
		#			}
		#		}
		#	}
		#}
	}
}